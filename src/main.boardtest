#include <Arduino.h>
#include <Wire.h>  
#include <WiFi.h>
#include <Adafruit_GFX.h>
// install lib berikut di platformio (buka terminal dari menu platformio, jalankan pio lib -g install https://github.com .....)
#include <Adafruit_SH1106.h> //https://github.com/nhatuan84/esp32-sh1106-oled

#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <AsyncElegantOTA.h>
#include "SPIFFS.h"

#define BUZZER 2
#define BUZZER_FREQ 500
#define CHN_BUZZER 0
#define CHN_MTRDC 1
#define PWMRES 8

#define D1 35
#define D2 34
#define D3 39
#define D4 36
#define D5 13
#define D6 12
#define D7 14
#define D8 15

#define O1 5
#define O2 18
#define O3 19
#define O4 23

#define S1 4
#define S2 16
#define S3 17
#define S4 27

#define S1S 26
#define S1D 25
#define S2S 33
#define S2D 32

Adafruit_SH1106 display(SDA, SCL);
// Create AsyncWebServer object on port 80
AsyncWebServer server(80);

String ssid="alat-1";
String password="12345678";
IPAddress IP_ap = {192, 168, 1, 1};
IPAddress gateway_ap = {192, 168, 1, 1};
IPAddress NMask_ap = {255, 255, 255, 0};

int btn1,btn2,btn3;

int mtrDC_freq = 50;
int mtrDC_res = 8;
int mtrDC_dutycycle = 0;
int delayControl = 1000;

uint32_t SetServoPos(float pos, float sdtmin, float sdtmax, int pulsemin, intpulsemax)
{
    uint32_t duty = (((pos/180.0)
              *2000)/20000.0*65536.0) + 1634;
         // convert 0-180 degrees to 0-65536

    return duty
}

void handleWeb( void * pvParameters ){
  printf("handleWeb running on core %d\n",xPortGetCoreID()); // on Serial
  int i;

  //  Route for root / web page
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    Serial.println("request web /");
    request->send(SPIFFS, "/index.html", "text/html",false);
  });
  server.on("/lastdata", HTTP_GET, [](AsyncWebServerRequest *request){
    request->send(200, "text/plain", "t:"+String(millis())+
         ", btn: "+String(btn1)+" "+String(btn2)+" "+String(btn3)+
         ", freqDC: "+String(mtrDC_freq)+", dutyDC "+String(mtrDC_dutycycle));
  });
  server.on("/update", HTTP_PUT, [](AsyncWebServerRequest *request){
    if (request->hasParam("delay")) {
         delayControl = request->getParam("delay")->value().toInt();
         request->send(200, "text/plain", "Berhasil update delay "+String(delayControl));
    }
    if (request->hasParam("dcfreq")) {
         mtrDC_freq = request->getParam("dcfreq")->value().toInt();
         ledcWriteTone(CHN_MTRDC, mtrDC_freq);
         ledcWrite(CHN_MTRDC, mtrDC_dutycycle);
         request->send(200, "text/plain", "Berhasil update dcfreq "+String(mtrDC_freq));
    }
    if (request->hasParam("dcdutycycle")) {
         mtrDC_dutycycle = request->getParam("dcdutycycle")->value().toInt();
         ledcWrite(CHN_MTRDC, mtrDC_dutycycle);
         request->send(200, "text/plain", "Berhasil update dcdutycycle "+String(mtrDC_dutycycle));
    }
    if (request->hasParam("srvfreq")) {
         mtrSRV_freq = request->getParam("srvfreq")->value().toInt();
         ledcWriteTone(CHN_MTRSRV, mtrSRV_freq);
         request->send(200, "text/plain", "Berhasil update srvdutycycle "+String(mtrSRV_freq));
    }
    if (request->hasParam("srvpulsa")) {
         mtrSRV_pulsa = request->getParam("srvpulsa")->value().toInt();
         ledcWrite(CHN_MTRDC, SetServoPos(float pos, float sdtmin, float sdtmax, int pulsemin, intpulsemax));
         request->send(200, "text/plain", "Berhasil update srvpulsa "+String(mtrSRV_pulsa));
    }
    request->send(200, "text/plain", "Tidak ada yang di update");
  });

  server.serveStatic("/", SPIFFS, "/");  
  server.onNotFound([](AsyncWebServerRequest *request){ request->send(404, "text/plain", "Not found"); });

  // Start ElegantOTA
  AsyncElegantOTA.begin(&server);

  server.begin();
  for(;;){
    delay(1000);
  }
}

void controlLoop( void * pvParameters ){
  printf("controlLoop running on core %d\n",xPortGetCoreID()); // on Serial
  // setup PWM motor
  
  digitalWrite(S2D, LOW);
  ledcSetup(CHN_MTRDC, mtrDC_freq, mtrDC_res);
  ledcAttachPin(S2S, CHN_MTRDC);
  ledcWrite(CHN_MTRDC, mtrDC_dutycycle);
  for(;;){
    
    vTaskDelay(delayControl/ portTICK_PERIOD_MS);
  }
}

// Notify Buzzer
void notifyBuzzer(int code){
  switch(code){
    case 1: 
        ledcWriteTone(CHN_BUZZER, 800);
        delay(1000);
        ledcWriteTone(CHN_BUZZER, 0);
        delay(100);
        ledcWriteTone(CHN_BUZZER, 500);
        delay(500);
        break;
    case 2:
        ledcWriteTone(CHN_BUZZER, 500);
        delay(200);
        ledcWriteTone(CHN_BUZZER, 0);
        delay(100);
        ledcWriteTone(CHN_BUZZER, 500);
        delay(200);
        break;
  }
  ledcWriteTone(CHN_BUZZER, 0);
}

// Initialize SPIFFS
void initSPIFFS() {
  if (!SPIFFS.begin(true)) {
    Serial.println("An error has occurred while mounting SPIFFS");
  }
  Serial.println("SPIFFS mounted successfully");
}

void setup() {
  Serial.begin(115200);
  display.begin(SH1106_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)

  initSPIFFS();
  WiFi.mode(WIFI_MODE_AP);
  WiFi.softAP(ssid.c_str(), password.c_str(), 3,0,11); //ssid, passwd, ch, hidden, maxconn
  WiFi.softAPConfig(IP_ap, IP_ap, NMask_ap);
   
  pinMode(D1,INPUT_PULLUP);
  pinMode(D2,INPUT_PULLUP);
  pinMode(D3,INPUT_PULLUP);

  
  pinMode(S2S,OUTPUT);
  pinMode(S2D,OUTPUT);


  ledcSetup(CHN_BUZZER, BUZZER_FREQ, PWMRES);
  ledcAttachPin(BUZZER, CHN_BUZZER);
  notifyBuzzer(1);
  
  // send Torque Reference to CANbus
  xTaskCreatePinnedToCore(
      handleWeb, /* Function to implement the task */
      "handleWeb", /* Name of the task */
      10000,  /* Stack size in words */
      NULL,  /* Task input parameter */
      0,  /* Priority of the task */
      NULL,  /* Task handle. */
      1); /* Core where the task should run */
  delay(1000);  // send Torque Reference to CANbus
  xTaskCreatePinnedToCore(
      controlLoop, /* Function to implement the task */
      "controlLoop", /* Name of the task */
      10000,  /* Stack size in words */
      NULL,  /* Task input parameter */
      0,  /* Priority of the task */
      NULL,  /* Task handle. */
      0); /* Core where the task should run */
  delay(1000);
  
}

void loop() {
  // put your main code here, to run repeatedly:
  btn1 = digitalRead(D1);
  btn2 = digitalRead(D2);
  btn3 = digitalRead(D3);
  display.clearDisplay();
  display.setTextSize(1.1);
  display.setTextColor(WHITE, BLACK);
  display.setCursor(0,0);display.println("Status BTN");
  display.setCursor(0,20);display.println(String(btn1)+" "+String(btn2)+" "+String(btn3));
  display.display();
  delay(1000);
}
